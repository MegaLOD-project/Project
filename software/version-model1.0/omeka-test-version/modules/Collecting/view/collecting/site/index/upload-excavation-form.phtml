<?php

$identity = $this->identity();
if (!$identity) {
    echo '<div class="error-message">';
    echo '<h3>Access Denied</h3>';
    echo '<p>You must be logged in to add excavations.</p>';
    echo '<a href="' . $this->url('login') . '" class="button">Login</a>';
    echo '</div>';
    return;
}


$this->collectingPrepareForm();
$this->headScript()->appendFile($this->assetUrl('js/excavation-form.js', 'AddTriplestore'));

$siteSlug = $this->currentSite()->slug();
$uploadUrl = $this->url('site/add-triplestore/upload', ['site-slug' => $siteSlug], true);

$form->setAttribute('action', $uploadUrl);
$form->setAttribute('method', 'post');
$form->setAttribute('enctype', 'multipart/form-data');

$result = $this->escapeHtml($this->params()->fromQuery('result', ''));
$itemSetId = $this->params()->fromQuery('item_set_id');


$existingArchaeologists = $existingArchaeologists ?? [];
?>

<style>

.enhanced-excavation-form {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
    color:black;

}

.form-section {
    background: #fafafa;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 25px;
    color:black;

    
}

.form-section h3 {
    margin-top: 0;
    color:black;
    border-bottom: 2px solid #4CAF50;
    padding-bottom: 10px;
}

.entity-management-tabs {
    background: white;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    color:black;

}

.tab-navigation {
    display: flex;
    background: #f0f0f0;
    border-bottom: 1px solid #ddd;
    color:black;

}

.tab-nav-item {
    padding: 15px 20px;
    cursor: pointer;
    border-right: 1px solid #ddd;
    transition: background-color 0.3s;
}

.tab-nav-item:last-child {
    border-right: none;
}

.tab-nav-item.active {
    background: white;
    color: #4CAF50;
    font-weight: bold;
}

.tab-nav-item:hover {
    background: #e8f5e8;
}

.tab-panel {
    display: none;
    padding: 25px;
    color:black;

}

.tab-panel.active {
    display: block;
}

.entity-list {
    margin-bottom: 20px;
}

.entity-item {
    background: white;
    border: 1px solid #ddd;
    border-radius: 4px;
    padding: 15px;
    margin-bottom: 10px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    transition: box-shadow 0.2s;
    color:black;

}

.entity-item:hover {
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.entity-summary h4 {
    margin: 0 0 5px 0;
    color:black;
}

.entity-details {
    font-size: 13px;
    color:black;
}

.entity-actions {
    display: flex;
    gap: 8px;
}

.btn {
    padding: 6px 12px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 12px;
    transition: background-color 0.2s;
}

.btn-primary {
    background: #4CAF50;
    color:black;
}

.btn-primary:hover {
    background: #45a049;
}

.btn-secondary {
    background: #2196F3;
    color:black;
}

.btn-secondary:hover {
    background: #1976D2;
}

.btn-danger {
    background: #f44336;
    color:black;
}

.btn-danger:hover {
    background: #d32f2f;
}

.add-entity-btn {
    background: #4CAF50;
    color:black;
    border: none;
    padding: 10px 20px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
}

.grid-2 {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 15px;
}

.archaeologist-selection {
    background: #e8f5e8;
    padding: 15px;
    border-radius: 6px;
    margin-bottom: 15px;
}


.entity-modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.5);
    z-index: 1000;
}

.modal-content {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: white;
    border-radius: 8px;
    width: 90%;
    max-width: 600px;
    max-height: 80vh;
    overflow-y: auto;
    box-shadow: 0 4px 20px rgba(0,0,0,0.3);
}

.modal-header {
    padding: 20px;
    border-bottom: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.modal-body {
    padding: 20px;
}

.modal-footer {
    padding: 15px 20px;
    border-top: 1px solid #ddd;
    text-align: right;
}

.close-btn {
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: #666;
}

.success-message, .error-message {
    padding: 15px;
    margin-bottom: 20px;
    border-radius: 4px;
}

.success-message {
    background-color: #dff0d8;
    color: #3c763d;
    border: 1px solid #d6e9c6;
}

.error-message {
    background-color: #f2dede;
    color: #a94442;
    border: 1px solid #ebccd1;
}

.form-group {
    margin-bottom: 15px;
    color:black;

}

.form-control {
    width: 100%;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    color:black;

}

.button-group {
    display: flex;
    gap: 10px;
    justify-content: center;
    margin-top: 30px;
}
</style>

<div class="enhanced-excavation-form">
    <?php if (!empty($result)): ?>
        <div class="<?php echo (strpos($result, 'successfully') !== false) ? 'success-message' : 'error-message'; ?>">
            <?php echo $result; ?>
        </div>

        <?php if (strpos($result, 'successfully') !== false && $itemSetId): ?>
            <div class="button-group">
                <a href="<?php echo $this->url('site/add-triplestore/upload', [
                    'site-slug' => $this->currentSite()->slug()
                ], ['query' => [
                    'upload_type' => 'arrowhead',
                    'item_set_id' => $itemSetId,
                    'mode' => 'file'
                ]], true); ?>" class="btn btn-primary">
                    Upload Arrowhead File
                </a>
                <a href="<?php echo $this->url('site', [], true); ?>" class="btn btn-secondary">
                    Exit
                </a>
            </div>
        <?php endif; ?>
    <?php else: ?>
        <?php echo $this->form()->openTag($form); ?>

        <input type="hidden" name="upload_type" value="<?php echo $this->escapeHtml($formType); ?>">

        <div class="form-section">
            <h3>üìã Basic Excavation Information</h3>
            <div class="form-elements">
                <?php foreach ($form->getElements() as $element): ?>
                    <div class="form-group">
                        <?php if ($element->getLabel()): ?>
                            <label><?php echo $this->formLabel($element); ?></label>
                        <?php endif; ?>
                        <?php echo $this->formElement($element); ?>
                        <?php echo $this->formElementErrors($element); ?>
                    </div>
                <?php endforeach; ?>
            </div>
        </div>

        <div class="form-section">
            <h3>üë§ Archaeologist Information</h3>
            <div class="archaeologist-selection">
               
                
                <div id="new-archaeologist-fields">
                    <div class="grid-2">
                        <div class="form-group">
                            <label for="new_archaeologist_name">Name *</label>
                            <input type="text" id="new_archaeologist_name" name="new_archaeologist_name" class="form-control">
                        </div>
                        <div class="form-group">
                            <label for="new_archaeologist_orcid">ORCID ID</label>
                            <input type="text" id="new_archaeologist_orcid" name="new_archaeologist_orcid" 
                                   class="form-control" placeholder="0000-0000-0000-0000">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="new_archaeologist_email">Email</label>
                        <input type="email" id="new_archaeologist_email" name="new_archaeologist_email" class="form-control">
                    </div>
                </div>
            </div>
        </div>

        <div class="form-section">
            <h3>üèõÔ∏è Archaeological Entities Management</h3>
            <div class="entity-management-tabs">
                <div class="tab-navigation">
                    <div class="tab-nav-item active" data-tab="contexts">
                        <span>üìÅ Contexts</span>
                        <small id="contexts-count">(0)</small>
                    </div>
                    <div class="tab-nav-item" data-tab="svus">
                        <span>üìä Stratigraphic Units</span>
                        <small id="svus-count">(0)</small>
                    </div>
                    <div class="tab-nav-item" data-tab="squares">
                        <span>‚¨ú Squares</span>
                        <small id="squares-count">(0)</small>
                    </div>
                    <div class="tab-nav-item" data-tab="encounters">
                        <span>üîç Encounter Events</span>
                        <small id="encounters-count">(0)</small>
                    </div>
                    <div class="tab-nav-item" data-tab="relationships">
                        <span>üîó Relationships</span>
                    </div>
                </div>

                <!-- Contexts Tab -->
                <div id="contexts-tab" class="tab-panel active">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                        <h4>Archaeological Contexts</h4>
                        <button type="button" class="add-entity-btn" onclick="openEntityModal('context')">
                            + Add Context
                        </button>
                    </div>
                    <div id="contexts-list" class="entity-list">
                        <p style="color: #666; font-style: italic;">No contexts added yet. Click "Add Context" to create one.</p>
                    </div>
                </div>

                <!-- SVUs Tab -->
                <div id="svus-tab" class="tab-panel">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                        <h4>Stratigraphic Volume Units</h4>
                        <button type="button" class="add-entity-btn" onclick="openEntityModal('svu')">
                            + Add SVU
                        </button>
                    </div>
                    <div id="svus-list" class="entity-list">
                        <p style="color: #666; font-style: italic;">No SVUs added yet. Click "Add SVU" to create one.</p>
                    </div>
                </div>

                <!-- Squares Tab -->
                <div id="squares-tab" class="tab-panel">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                        <h4>Excavation Squares</h4>
                        <button type="button" class="add-entity-btn" onclick="openEntityModal('square')">
                            + Add Square
                        </button>
                    </div>
                    <div id="squares-list" class="entity-list">
                        <p style="color: #666; font-style: italic;">No squares added yet. Click "Add Square" to create one.</p>
                    </div>
                </div>

                <!-- Encounter Events Tab -->
                <div id="encounters-tab" class="tab-panel">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                        <h4>Encounter Events</h4>
                        <button type="button" class="add-entity-btn" onclick="openEntityModal('encounter')">
                            + Add Encounter Event
                        </button>
                    </div>
                    <div id="encounters-list" class="entity-list">
                        <p style="color: #666; font-style: italic;">No encounter events added yet. Click "Add Encounter Event" to create one.</p>
                    </div>
                </div>

                <!-- Relationships Tab -->
                <div id="relationships-tab" class="tab-panel">
                    <h4>Entity Relationships</h4>
                    <div style="background: #f8f9fa; padding: 15px; border-radius: 4px; margin-bottom: 15px;">
                        <h5>Context ‚Üí SVU Relationships</h5>
                        <div id="context-svu-relationships">
                            <p style="color: #666; font-style: italic;">Add contexts and SVUs first to define relationships.</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <input type="hidden" id="entities_data" name="entities_data" value="">

        <div class="form-actions button-group">
            <button type="submit" class="btn btn-primary" style="padding: 12px 30px; font-size: 16px;">
                üì§ Submit Excavation Data
            </button>
        </div>

        <?php echo $this->form()->closeTag(); ?>
    <?php endif; ?>
</div>

<div id="entity-modal" class="entity-modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 id="modal-title">Add Entity</h3>
            <button type="button" class="close-btn" onclick="closeEntityModal()">√ó</button>
        </div>
        <div class="modal-body">
            <form id="entity-form">
                <div id="modal-fields">
                </div>
            </form>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" onclick="closeEntityModal()">Cancel</button>
            <button type="button" class="btn btn-primary" onclick="saveEntity()">Save</button>
        </div>
    </div>
</div>

<script>

let entities = {
    contexts: [],
    svus: [],
    squares: [],
    encounters: []
};

let currentEntityType = '';
let currentEntityIndex = -1;


document.querySelectorAll('.tab-nav-item').forEach(tab => {
    tab.addEventListener('click', function() {
        const targetTab = this.dataset.tab;
        

        document.querySelectorAll('.tab-nav-item').forEach(t => t.classList.remove('active'));
        document.querySelectorAll('.tab-panel').forEach(p => p.classList.remove('active'));
        
        this.classList.add('active');
        document.getElementById(targetTab + '-tab').classList.add('active');
    });
});


document.getElementById('existing_archaeologist').addEventListener('change', function() {
    const newFields = document.getElementById('new-archaeologist-fields');
    const nameField = document.getElementById('new_archaeologist_name');
    const orcidField = document.getElementById('new_archaeologist_orcid');
    const emailField = document.getElementById('new_archaeologist_email');
    
    if (this.value) {

        const option = this.options[this.selectedIndex];
        nameField.value = option.dataset.name || '';
        orcidField.value = option.dataset.orcid || '';
        emailField.value = option.dataset.email || '';
        

        nameField.readOnly = true;
        orcidField.readOnly = true;
        emailField.readOnly = true;
        
        newFields.style.opacity = '0.7';
    } else {

        nameField.value = '';
        orcidField.value = '';
        emailField.value = '';
        

        nameField.readOnly = false;
        orcidField.readOnly = false;
        emailField.readOnly = false;
        
        newFields.style.opacity = '1';
    }
});


function openEntityModal(entityType, index = -1) {
    currentEntityType = entityType;
    currentEntityIndex = index;
    
    const modal = document.getElementById('entity-modal');
    const title = document.getElementById('modal-title');
    const fields = document.getElementById('modal-fields');
    
    const entityLabels = {
        'context': 'Context',
        'svu': 'Stratigraphic Volume Unit',
        'square': 'Square',
        'encounter': 'Encounter Event'
    };
    
    title.textContent = (index >= 0 ? 'Edit ' : 'Add ') + entityLabels[entityType];
    fields.innerHTML = getEntityFields(entityType);
    

    if (index >= 0) {
        const entity = entities[entityType + 's'][index];
        populateModalFields(entity);
    }
    
    modal.style.display = 'block';
}

function closeEntityModal() {
    document.getElementById('entity-modal').style.display = 'none';
    currentEntityType = '';
    currentEntityIndex = -1;
}

function getEntityFields(type) {
    const fieldTemplates = {
        'context': `
            <div class="form-group">
                <label for="context_id">Context ID *</label>
                <input type="text" id="context_id" name="context_id" class="form-control" required placeholder="e.g., CTX-001">
            </div>
            <div class="form-group">
                <label for="context_description">Description</label>
                <textarea id="context_description" name="context_description" class="form-control" rows="3" placeholder="Describe this archaeological context..."></textarea>
            </div>`,
        
        'svu': `
            <div class="form-group">
                <label for="svu_id">SVU ID *</label>
                <input type="text" id="svu_id" name="svu_id" class="form-control" required placeholder="e.g., SVU-001">
            </div>
            <div class="form-group">
                <label for="svu_description">Description</label>
                <textarea id="svu_description" name="svu_description" class="form-control" rows="3" placeholder="Describe this stratigraphic unit..."></textarea>
            </div>
            <div class="grid-2">
                <div class="form-group">
                    <label for="svu_lower_year">Lower Bound Year</label>
                    <input type="number" id="svu_lower_year" name="svu_lower_year" class="form-control" placeholder="e.g., 3000">
                </div>
                <div class="form-group">
                    <label for="svu_upper_year">Upper Bound Year</label>
                    <input type="number" id="svu_upper_year" name="svu_upper_year" class="form-control" placeholder="e.g., 2500">
                </div>
            </div>
            <div class="grid-2">
                <div class="form-group">
                    <label><input type="checkbox" id="svu_lower_bc" name="svu_lower_bc"> Lower Bound is BC</label>
                </div>
                <div class="form-group">
                    <label><input type="checkbox" id="svu_upper_bc" name="svu_upper_bc"> Upper Bound is BC</label>
                </div>
            </div>`,
        
        'square': `
            <div class="form-group">
                <label for="square_id">Square ID *</label>
                <input type="text" id="square_id" name="square_id" class="form-control" required placeholder="e.g., A1, B2, C3">
            </div>
            <div class="grid-2">
                <div class="form-group">
                    <label for="square_east_west">East-West Coordinate</label>
                    <input type="number" step="any" id="square_east_west" name="square_east_west" class="form-control" placeholder="0.0">
                </div>
                <div class="form-group">
                    <label for="square_north_south">North-South Coordinate</label>
                    <input type="number" step="any" id="square_north_south" name="square_north_south" class="form-control" placeholder="0.0">
                </div>
            </div>`,
        
        'encounter': `
            <div class="form-group">
                <label for="encounter_date">Date *</label>
                <input type="date" id="encounter_date" name="encounter_date" class="form-control" required>
            </div>`
    };
    
    return fieldTemplates[type] || '';
}

function populateModalFields(entity) {
    for (const [key, value] of Object.entries(entity)) {
        const field = document.getElementById(key);
        if (field) {
            if (field.type === 'checkbox') {
                field.checked = value;
            } else {
                field.value = value;
            }
        }
    }
}

function saveEntity() {
    const form = document.getElementById('entity-form');
    const formData = new FormData(form);
    const entity = {};
    

    for (const [key, value] of formData.entries()) {
        const field = form.querySelector(`[name="${key}"]`);
        if (field && field.type === 'checkbox') {
            entity[key] = field.checked;
        } else {
            entity[key] = value;
        }
    }
    

    const requiredFields = form.querySelectorAll('[required]');
    for (const field of requiredFields) {
        if (!entity[field.name] || entity[field.name].trim() === '') {
            alert('Please fill in all required fields.');
            field.focus();
            return;
        }
    }
    

    const entityArray = entities[currentEntityType + 's'];
    if (currentEntityIndex >= 0) {
        entityArray[currentEntityIndex] = entity;
    } else {
        entityArray.push(entity);
    }
    

    updateEntityDisplay(currentEntityType);
    updateEntityCounts();
    updateRelationships();
    updateHiddenField();
    
    closeEntityModal();
}

function updateEntityDisplay(entityType) {
    const listElement = document.getElementById(entityType + 's-list');
    const entityArray = entities[entityType + 's'];
    
    if (entityArray.length === 0) {
        listElement.innerHTML = `<p style="color: #666; font-style: italic;">No ${entityType}s added yet. Click "Add ${entityType}" to create one.</p>`;
        return;
    }
    
    listElement.innerHTML = '';
    
    entityArray.forEach((entity, index) => {
        const div = document.createElement('div');
        div.className = 'entity-item';
        
        const summary = getEntitySummary(entityType, entity);
        
        div.innerHTML = `
            <div class="entity-summary">
                <h4>${summary.title}</h4>
                <div class="entity-details">${summary.details}</div>
            </div>
            <div class="entity-actions">
                <button type="button" class="btn btn-secondary" onclick="openEntityModal('${entityType}', ${index})">Edit</button>
                <button type="button" class="btn btn-danger" onclick="removeEntity('${entityType}', ${index})">Remove</button>
            </div>
        `;
        
        listElement.appendChild(div);
    });
}

function getEntitySummary(type, entity) {
    const summaries = {
        'context': {
            title: entity.context_id || 'Unnamed Context',
            details: `${entity.context_description || 'No description'}`
        },
        'svu': {
            title: entity.svu_id || 'Unnamed SVU',
            details: `${entity.svu_lower_year || '?'} ${entity.svu_lower_bc ? 'BC' : 'AD'} - ${entity.svu_upper_year || '?'} ${entity.svu_upper_bc ? 'BC' : 'AD'} | ${entity.svu_description || 'No description'}`
        },
        'square': {
            title: entity.square_id || 'Unnamed Square',
            details: `E-W: ${entity.square_east_west || '0'}, N-S: ${entity.square_north_south || '0'}`
        },
        'encounter': {
            title: `Encounter ${entity.encounter_date || 'No date'}`,
            details: `Date: ${entity.encounter_date || 'No date'}`
        }
    };
    
    return summaries[type] || { title: 'Unknown', details: '' };
}

function removeEntity(entityType, index) {
    if (confirm(`Are you sure you want to remove this ${entityType}?`)) {
        entities[entityType + 's'].splice(index, 1);
        updateEntityDisplay(entityType);
        updateEntityCounts();
        updateRelationships();
        updateHiddenField();
    }
}

function updateEntityCounts() {
    document.getElementById('contexts-count').textContent = `(${entities.contexts.length})`;
    document.getElementById('svus-count').textContent = `(${entities.svus.length})`;
    document.getElementById('squares-count').textContent = `(${entities.squares.length})`;
    document.getElementById('encounters-count').textContent = `(${entities.encounters.length})`;
}

function updateRelationships() {
    const relationshipsDiv = document.getElementById('context-svu-relationships');
    
    if (entities.contexts.length === 0 || entities.svus.length === 0) {
        relationshipsDiv.innerHTML = '<p style="color: #666; font-style: italic;">Add contexts and SVUs first to define relationships.</p>';
        return;
    }
    
    relationshipsDiv.innerHTML = `
        <div style="margin-bottom: 15px;">
            <label>Link Context to SVU:</label>
            <div style="display: flex; gap: 10px; align-items: center; margin-top: 5px;">
                <select id="context-select" class="form-control" style="width: auto;">
                    <option value="">Select Context</option>
                    ${entities.contexts.map((ctx, idx) => `<option value="${idx}">${ctx.context_id}</option>`).join('')}
                </select>
                <span>contains</span>
                <select id="svu-select" class="form-control" style="width: auto;">
                    <option value="">Select SVU</option>
                    ${entities.svus.map((svu, idx) => `<option value="${idx}">${svu.svu_id}</option>`).join('')}
                </select>
                <button type="button" class="btn btn-primary" onclick="addRelationship()">Add Link</button>
            </div>
        </div>
        <div id="relationships-list">
            ${getRelationshipsList()}
        </div>
    `;
}

function addRelationship() {
    const contextSelect = document.getElementById('context-select');
    const svuSelect = document.getElementById('svu-select');
    
    if (!contextSelect.value || !svuSelect.value) {
        alert('Please select both a context and an SVU.');
        return;
    }
    
    const contextIdx = parseInt(contextSelect.value);
    const svuIdx = parseInt(svuSelect.value);
    

    if (!entities.relationships) {
        entities.relationships = [];
    }
    

    const exists = entities.relationships.some(rel => 
        rel.context === contextIdx && rel.svu === svuIdx
    );
    
    if (exists) {
        alert('This relationship already exists.');
        return;
    }
    

    entities.relationships.push({
        context: contextIdx,
        svu: svuIdx
    });
    

    contextSelect.value = '';
    svuSelect.value = '';
    

    updateRelationships();
    updateHiddenField();
}

function getRelationshipsList() {
    if (!entities.relationships || entities.relationships.length === 0) {
        return '<p style="color: #666; font-style: italic;">No relationships defined yet.</p>';
    }
    
    return entities.relationships.map((rel, idx) => {
        const context = entities.contexts[rel.context];
        const svu = entities.svus[rel.svu];
        
        return `
            <div class="entity-item" style="margin-bottom: 8px;">
                <div class="entity-summary">
                    <strong>${context.context_id}</strong> contains <strong>${svu.svu_id}</strong>
                </div>
                <div class="entity-actions">
                    <button type="button" class="btn btn-danger" onclick="removeRelationship(${idx})">Remove</button>
                </div>
            </div>
        `;
    }).join('');
}

function removeRelationship(index) {
    if (confirm('Are you sure you want to remove this relationship?')) {
        entities.relationships.splice(index, 1);
        updateRelationships();
        updateHiddenField();
    }
}

function updateHiddenField() {

    document.getElementById('entities_data').value = JSON.stringify(entities);
}


document.addEventListener('DOMContentLoaded', function() {
    updateEntityCounts();
    

    const today = new Date().toISOString().split('T')[0];
    

    if (!entities.relationships) {
        entities.relationships = [];
    }
});


document.querySelector('form').addEventListener('submit', function(e) {

    updateHiddenField();
    

    if (entities.contexts.length === 0) {
        e.preventDefault();
        alert('Please add at least one archaeological context before submitting.');
        return false;
    }
    

    const existingArch = document.getElementById('existing_archaeologist').value;
    const newArchName = document.getElementById('new_archaeologist_name').value;
    
    if (!existingArch && !newArchName.trim()) {
        e.preventDefault();
        alert('Please either select an existing archaeologist or provide a name for a new one.');
        return false;
    }
});


function generateNextId(entityType) {
    const entityArray = entities[entityType + 's'];
    const prefix = {
        'context': 'CTX-',
        'svu': 'SVU-',
        'square': '',
        'encounter': 'ENC-'
    }[entityType];
    
    if (entityType === 'square') {

        const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        const existing = entityArray.map(s => s.square_id).filter(Boolean);
        
        for (let letter of letters) {
            for (let num = 1; num <= 20; num++) {
                const id = letter + num;
                if (!existing.includes(id)) {
                    return id;
                }
            }
        }
        return 'A1'; // fallback
    } else {
        const maxNum = entityArray.reduce((max, entity) => {
            const id = entity[entityType + '_id'] || '';
            const match = id.match(/(\d+)$/);
            if (match) {
                return Math.max(max, parseInt(match[1]));
            }
            return max;
        }, 0);
        
        return prefix + String(maxNum + 1).padStart(3, '0');
    }
}


function openEntityModal(entityType, index = -1) {
    currentEntityType = entityType;
    currentEntityIndex = index;
    
    const modal = document.getElementById('entity-modal');
    const title = document.getElementById('modal-title');
    const fields = document.getElementById('modal-fields');
    
    const entityLabels = {
        'context': 'Context',
        'svu': 'Stratigraphic Volume Unit',
        'square': 'Square',
        'encounter': 'Encounter Event'
    };
    
    title.textContent = (index >= 0 ? 'Edit ' : 'Add ') + entityLabels[entityType];
    fields.innerHTML = getEntityFields(entityType);
    

    if (index === -1) {
        const idField = document.getElementById(entityType + '_id');
        if (idField) {
            idField.value = generateNextId(entityType);
        }
        

        if (entityType === 'encounter') {
            const dateField = document.getElementById('encounter_date');
            if (dateField) {
                dateField.value = new Date().toISOString().split('T')[0];
            }
        }
    } else {

        const entity = entities[entityType + 's'][index];
        populateModalFields(entity);
    }
    
    modal.style.display = 'block';
}


document.getElementById('entity-modal').addEventListener('click', function(e) {
    if (e.target === this) {
        closeEntityModal();
    }
});


document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
        closeEntityModal();
    }
});
</script>